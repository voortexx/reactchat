{"version":3,"sources":["Components/Message/Message.js","Components/Form/Form.js","Components/App/App.js","config.js","serviceWorker.js","index.js"],"names":["Message","_this","this","react_default","a","createElement","web","from","opacity","transform","to","props","style","className","message","avatar","src","alt","userName","Component","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","list","messageRef","firebase","database","ref","child","listenMessages","nextProps","inviteUser","setState","user","displayName","photoURL","event","target","value","newItem","push","key","handleSend","_this2","limitToLast","on","values","val","_this3","map","item","index","Message_Message_Message","delay","type","placeholder","onChange","handleChange","bind","onKeyPress","handleKeyPress","onClick","display","fontSize","marginLeft","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","auth","onAuthStateChanged","provider","GoogleAuthProvider","signInWithPopup","signOut","handleLogOut","Fragment","justifyContent","marginBottom","handleSignIn","handleInviteName","Form_Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4f824a3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Message.css\";\nimport { Spring } from \"react-spring\";\nexport default class Message extends Component {\n  render() {\n    return (\n      <Spring\n        from={{ opacity: 0, transform: \"translate3d(0,-100px,0)\" }}\n        to={{ opacity: 1, transform: \"translate3d(0,0,0)\" }}\n      >\n        {props => (\n          <div style={props} className=\"message\">\n            <span className=\"avatar\">\n              {this.props.message.avatar ? (\n                <img src={this.props.message.avatar} alt=\"avatar\" />\n              ) : (\n                <i className=\"fas fa-user\" />\n              )}\n            </span>\n            <div>\n              <span className=\"message__author\">\n                {this.props.message.userName}\n              </span>\n              <p>{this.props.message.message}</p>\n            </div>\n          </div>\n        )}\n      </Spring>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Form.css\";\nimport Message from \"../Message/Message\";\nimport firebase from \"firebase/app\";\nimport { Spring } from \"react-spring\";\nexport default class Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"Anonyme\",\n      message: \"\",\n      list: []\n    };\n    this.messageRef = firebase\n      .database()\n      .ref()\n      .child(\"messages\");\n    this.listenMessages();\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.inviteUser) {\n      this.setState({\n        userName: nextProps.inviteUser\n      });\n    }\n    if (nextProps.user) {\n      this.setState({\n        userName: nextProps.user.displayName,\n        avatar: nextProps.user.photoURL\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({ message: event.target.value });\n  }\n\n  handleSend() {\n    if (this.state.message) {\n      let newItem = {\n        userName: this.state.userName,\n        message: this.state.message\n      };\n      if (this.state.avatar) {\n        newItem.avatar = this.state.avatar;\n      }\n      this.messageRef.push(newItem);\n      this.setState({ message: \"\" });\n    }\n  }\n  handleKeyPress(event) {\n    if (event.key !== \"Enter\") return;\n    this.handleSend();\n  }\n  listenMessages() {\n    this.messageRef.limitToLast(10).on(\"value\", message => {\n      this.setState({\n        list: Object.values(message.val())\n      });\n    });\n  }\n  render() {\n    return (\n      <div className=\"form\">\n        <div className=\"form__message\">\n          {this.state.list.map((item, index) => (\n            <Message key={index} message={item} />\n          ))}\n        </div>\n        <Spring\n          from={{ opacity: 0, transform: \"scale(2)\" }}\n          to={{ opacity: 1, transform: \"scale(1)\" }}\n          delay={800}\n        >\n          {props => (\n            <div style={props} className=\"form__row\">\n              <input\n                className=\"form__input\"\n                type=\"text\"\n                placeholder=\"Type message\"\n                value={this.state.message}\n                onChange={this.handleChange.bind(this)}\n                onKeyPress={this.handleKeyPress.bind(this)}\n              />\n              <button\n                className=\"form__button\"\n                onClick={this.handleSend.bind(this)}\n              >\n                <span style={{ display: \"flex\" }}>\n                  SEND{\" \"}\n                  <i\n                    style={{ fontSize: \"15px\", marginLeft: \"10px\" }}\n                    className=\"fas fa-location-arrow\"\n                  />\n                </span>\n              </button>\n            </div>\n          )}\n        </Spring>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"../Form/Form.js\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firebase-database\";\nimport \"firebase/firebase-auth\";\nimport { Spring } from \"react-spring\";\nimport firebaseConfig from \"../../config\";\nfirebase.initializeApp(firebaseConfig);\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      inviteUser: \"\"\n    };\n  }\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({ user });\n    });\n  }\n  handleSignIn() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider);\n  }\n  handleLogOut() {\n    firebase.auth().signOut();\n    this.setState({ user: null, inviteUser: \"\" });\n  }\n  handleInviteName(event) {\n    this.setState({ inviteUser: event.target.value });\n  }\n\n  render() {\n    return (\n      <Spring\n        from={{ opacity: 0, transform: \"translate3d(0,-100px,0)\" }}\n        to={{ opacity: 1, transform: \"translate3d(0,0,0)\" }}\n        delay={400}\n      >\n        {props => (\n          <div style={props} className=\"app\">\n            <div className=\"app__header\">\n              <h1>REACT CHAT</h1>\n              {!this.state.user ? (\n                <React.Fragment>\n                  <h2>Sign in or chat in Invite Mode</h2>\n                  <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                    <div>\n                      <p style={{ marginBottom: \"5px\" }}>Google Account</p>\n                      <button\n                        className=\"app__button\"\n                        onClick={this.handleSignIn.bind(this)}\n                      >\n                        Login\n                      </button>\n                    </div>\n                    <div>\n                      <p style={{ marginBottom: \"5px\" }}>Invite Mode</p>\n                      <input\n                        type=\"text\"\n                        value={this.state.inviteUser}\n                        onChange={event => this.handleInviteName(event)}\n                        placeholder=\"Your Nickname\"\n                      />\n                    </div>\n                  </div>\n                </React.Fragment>\n              ) : (\n                <button\n                  className=\"app__button\"\n                  onClick={this.handleLogOut.bind(this)}\n                >\n                  Logout\n                </button>\n              )}\n            </div>\n            <div className=\"app__list\">\n              <Form user={this.state.user} inviteUser={this.state.inviteUser} />\n            </div>\n          </div>\n        )}\n      </Spring>\n    );\n  }\n}\nexport default App;\n","export default {\n  apiKey: \"AIzaSyBnZri54ASgDcSHCY1T-PQej2WavmyH5Bw\",\n  authDomain: \"wildchat-1ec6f.firebaseapp.com\",\n  databaseURL: \"https://wildchat-1ec6f.firebaseio.com\",\n  projectId: \"wildchat-1ec6f\",\n  storageBucket: \"wildchat-1ec6f.appspot.com\",\n  messagingSenderId: \"683321377373\"\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}